{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/dynamic-import-named-export/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://geekscreed.com"}},"post":{"fields":{"slug":"/dynamic-import-named-export/"},"frontmatter":{"title":"Dynamic Import named exports in JavaScript","authors":[{"id":"sasivarnan","name":"Sasivarnan R","bio":"Software Engineer. Tech Enthusiast. Loves coding ðŸ’» and music ðŸŽ¼.","website":"https://geekscreed.com","twitter":"iamsasivarnan","linkedin":"sasivarnan","profile_image":"https://avatars0.githubusercontent.com/u/5305600?v=4"}],"tags":[{"id":"javascript","name":"JavaScript","slug":"javascript"},{"id":"webpack","name":"Webpack","slug":"webpack"},{"id":"web-dev","name":"Web Development","slug":"web-dev"}],"published_at":"17 Feb, 2021","feature_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/feeaa63df36c1ca1ec60612b85404dde/f7872/port.jpg","srcSet":"/static/feeaa63df36c1ca1ec60612b85404dde/1f252/port.jpg 180w,\n/static/feeaa63df36c1ca1ec60612b85404dde/706fa/port.jpg 360w,\n/static/feeaa63df36c1ca1ec60612b85404dde/f7872/port.jpg 720w,\n/static/feeaa63df36c1ca1ec60612b85404dde/69eac/port.jpg 1440w","sizes":"(min-width: 720px) 720px, 100vw"},"sources":[{"srcSet":"/static/feeaa63df36c1ca1ec60612b85404dde/ff3fb/port.webp 180w,\n/static/feeaa63df36c1ca1ec60612b85404dde/22e2a/port.webp 360w,\n/static/feeaa63df36c1ca1ec60612b85404dde/4da88/port.webp 720w,\n/static/feeaa63df36c1ca1ec60612b85404dde/31706/port.webp 1440w","type":"image/webp","sizes":"(min-width: 720px) 720px, 100vw"}]},"width":720,"height":480}}}},"excerpt":"JavaScript has come a long way since its introduction in 1995. The dynamics of the language have completely changed since the adaptation ofâ€¦","html":"<p>JavaScript has come a long way since its introduction in 1995. The dynamics of the language have completely changed since the adaptation of the <code>ECMAScript 2015 (ES6)</code> standard, that got released in 2015.</p>\n<p>As many legacy applications started moving to the Web, the web was no longer a place to just serve information. Lots of businesses around the world can run on a web browser. The advent of <code>ChromeOS</code> and <code>Windows 10X</code> operating systems are proving the same. As a result of such growth, the amount of JavaScript code that we ship to the client has also increased in an exploding way.</p>\n<p>To solve this problem of shipping a big bundle of JavaScript, we can take advantage of <a href=\"https://github.com/tc39/proposal-dynamic-import\">dynamic import</a> (i.e.- lazyload) feature that got introduced in <code>ECMAScript 2020</code>. It helps us remove that module from our main bundle by code splitting and download the JavaScript module on demand instead of downloading it at the time of page load.</p>\n<p>Let's say we have a module with different exports.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"lang-js\"><code class=\"lang-js\"><span class=\"token comment\">// lib/math.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mul</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">div</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Math<span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can import a JavaScript module dynamically using the <code>import(&#x3C;path_to_the_module>)</code> syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"lang-js\"><code class=\"lang-js\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./lib/math.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The resulting module will have every export from the module</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Math<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">,</span> mul<span class=\"token punctuation\">,</span> div <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> module<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But there is one problem here. But default, the entire module is exported including the default and named exports.</p>\n<p>What if we want to import only one named export or only default export instead of the entire module dynamically? Let's see a couple of ways on how to pick only the module(s) that we want.</p>\n<h3>Webpack Magic Comments</h3>\n<p>If your current project used <code>Webpack 5</code>, then there is a webpack magic comment called <code>webpackExports</code> that comes in handy for this situation. We can specify the list of exports to load as an array to this comment and Webpack will take care of bundling only those modules for loading it dynamically.</p>\n<blockquote>\n<p><strong>Note:</strong> Using older browsers? Check if your browser supports dynamic import syntax on the <a href=\"https://caniuse.com/es6-module-dynamic-import\">Can I use</a> database.</p>\n</blockquote>\n<p>Let's see this in action.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"lang-js\"><code class=\"lang-js\"><span class=\"token comment\">// specify webpackExports comments within the import() function</span>\n\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackExports: [\"default\", \"sum\"] */</span> <span class=\"token string\">\"./lib/math.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the module.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Math<span class=\"token punctuation\">,</span> sum <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> module<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example, we specified a Webpack magic comment called <code>webpackExports</code> with the value <code>[\"default\", \"sum\"]</code> to it. While bundling in <strong>production</strong> mode, Webpack will read this info and pick only the specified exports.</p>\n<p>Currently <a href=\"/tag/gatsby\">Gatsby</a> has Webpack 5 support from <a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/v3.0\">version 3.0</a> and <code>Create React App</code> is working the <a href=\"https://github.com/facebook/create-react-app/issues/9994\">Webpack 5</a> support.</p>\n<h3>Re-export as a different module</h3>\n<p>Don't have <code>Webpack 5</code> yet in your project. No worries. There is another hack to get around this.</p>\n<p>We just have to create a local module that imports and exports only the exports that we need and dynamically import that module.</p>\n<p>Let's create a smaller version of the module by exporting only the required modules from our main module.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"lang-js\"><code class=\"lang-js\"><span class=\"token comment\">// ./lib/mini-math.js;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> sum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now let's dynamically import the smaller module.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"lang-js\"><code class=\"lang-js\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./lib/mini-math.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> Math<span class=\"token punctuation\">,</span> sum <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> module<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, this bundle will have only the entities that we exported.</p>\n<hr>\n<p>You can also use these methods to import an named export from <code>node_modules</code> folder.</p>\n<p>Hope this post helped you to shave off some kilobytes from your JavaScript bundle.</p>\n<p>If it helped, let me know in the comments section below and share this post with your circle.</p>\n<p><span>Hero image by <a href=\"https://unsplash.com/@chuttersnap?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">CHUTTERSNAP</a> on <a href=\"https://unsplash.com/s/photos/import?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>"},"relatedPosts":{"totalCount":3,"edges":[{"node":{"timeToRead":2,"excerpt":"We are seeing an increase in the popularity of JAMStack. Gatsby is one of the popular JAMStack frameworks. There are a lot of tools andâ€¦","fields":{"slug":"/deploy-gatsby-site-to-github-pages-using-github-actions/"},"frontmatter":{"title":"Deploy Gatsby Site to GitHub Pages using GitHub Actions","published_at":"03 Dec, 2019","featured":null,"feature_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#7898a8","images":{"fallback":{"src":"/static/7121a6d9018b45a47f522869e919e4cf/2daae/ship-it.jpg","srcSet":"/static/7121a6d9018b45a47f522869e919e4cf/2daae/ship-it.jpg 600w","sizes":"(min-width: 600px) 600px, 100vw"},"sources":[{"srcSet":"/static/7121a6d9018b45a47f522869e919e4cf/714c0/ship-it.webp 600w","type":"image/webp","sizes":"(min-width: 600px) 600px, 100vw"}]},"width":600,"height":374}}},"authors":[{"id":"sasivarnan","name":"Sasivarnan R","profile_image":"https://avatars0.githubusercontent.com/u/5305600?v=4"}],"tags":[{"id":"gatsby","name":"Gatsby"},{"id":"web-dev","name":"Web Development"},{"id":"github","name":"GitHub"}]}}},{"node":{"timeToRead":2,"excerpt":"Ever encountered a situation where you need to skip some unfinished, unpolished posts while deploying your Gatsby blog? Gatsby is awesomeâ€¦","fields":{"slug":"/draft-post-support-on-gatsby-blog/"},"frontmatter":{"title":"How to add Draft posts Support to Gatsby blog","published_at":"16 Dec, 2018","featured":true,"feature_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8c8c8","images":{"fallback":{"src":"/static/adb9176d1cd50c2a15ff91bc7ee099d2/4b314/drafts.jpg","srcSet":"/static/adb9176d1cd50c2a15ff91bc7ee099d2/4b314/drafts.jpg 600w","sizes":"(min-width: 600px) 600px, 100vw"},"sources":[{"srcSet":"/static/adb9176d1cd50c2a15ff91bc7ee099d2/2ae4e/drafts.webp 600w","type":"image/webp","sizes":"(min-width: 600px) 600px, 100vw"}]},"width":600,"height":389}}},"authors":[{"id":"sasivarnan","name":"Sasivarnan R","profile_image":"https://avatars0.githubusercontent.com/u/5305600?v=4"}],"tags":[{"id":"gatsby","name":"Gatsby"},{"id":"web-dev","name":"Web Development"},{"id":"graphql","name":"GraphQL"}]}}},{"node":{"timeToRead":5,"excerpt":"Hello folks. In this article, I am gonna share why we should stop building custom webpack config and instead use create-react-app toâ€¦","fields":{"slug":"/use-create-react-app-to-scaffold-next-react-app/"},"frontmatter":{"title":"Why you should use create-react-app to Scaffold your Next React App?","published_at":"12 Dec, 2018","featured":null,"feature_image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/5dd2d2fd5d249486989b97a6ceab8c5a/3f4ea/react-code-macbook.jpg","srcSet":"/static/5dd2d2fd5d249486989b97a6ceab8c5a/3f4ea/react-code-macbook.jpg 600w","sizes":"(min-width: 600px) 600px, 100vw"},"sources":[{"srcSet":"/static/5dd2d2fd5d249486989b97a6ceab8c5a/5f7b9/react-code-macbook.webp 600w","type":"image/webp","sizes":"(min-width: 600px) 600px, 100vw"}]},"width":600,"height":400}}},"authors":[{"id":"sasivarnan","name":"Sasivarnan R","profile_image":"https://avatars0.githubusercontent.com/u/5305600?v=4"}],"tags":[{"id":"react","name":"React JS"},{"id":"web-dev","name":"Web Development"},{"id":"webpack","name":"Webpack"}]}}}]}},"pageContext":{"slug":"/dynamic-import-named-export/","tags":["javascript","webpack","web-dev"]}},"staticQueryHashes":["2136327730","2367946931","3544567509"]}